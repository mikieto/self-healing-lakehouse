name: 'Terraform CI/CD'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  id-token: write
  security-events: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: terraform/environments/dev

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        role-session-name: GitHubActionsSession
        aws-region: ${{ vars.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.11.0

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init -backend-config=backend.hcl

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Check for Script Changes
      id: script_changes
      run: |
        echo "üìä Checking for Glue script changes..."
        
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        else
          BASE_SHA="${{ github.event.before }}"
          HEAD_SHA="${{ github.sha }}"
        fi
        
        # Check for Glue script changes
        CHANGED_SCRIPTS=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep "scripts/glue/" || echo "none")
        
        if [ "$CHANGED_SCRIPTS" != "none" ]; then
          echo "üîÑ Glue script changes detected:"
          echo "$CHANGED_SCRIPTS"
          echo "script_changed=true" >> $GITHUB_OUTPUT
        else
          echo "üìã No Glue script changes detected"
          echo "script_changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Run Trivy security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'terraform/environments/dev'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Check if SARIF file exists
      id: check_sarif
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "sarif_exists=true" >> $GITHUB_OUTPUT
        else
          echo "sarif_exists=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è SARIF file not found - creating empty file"
          echo '{"runs": []}' > trivy-results.sarif
        fi

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false -var="alert_email=${{ vars.ALERT_EMAIL }}"
      continue-on-error: true

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        GIT_HASH="${{ github.sha }}"
        TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        terraform apply -auto-approve -input=false \
          -var="alert_email=${{ vars.ALERT_EMAIL }}" \
          -var="git_commit_hash=$GIT_HASH" \
          -var="deployment_timestamp=$TIMESTAMP" \
          -var="deployed_by=github-actions"

    - name: Verify Script Deployment
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.script_changes.outputs.script_changed == 'true'
      run: |
        echo "üîç Verifying Glue script deployment..."
        
        BUCKET=$(terraform output -raw data_lake_bucket_name)
        
        echo "üìÑ Checking uploaded scripts:"
        aws s3 ls s3://$BUCKET/scripts/
        
        echo "üìä Checking version metadata:"
        aws s3 cp s3://$BUCKET/scripts/.versions.json - | jq '.'

    - name: Send notification
      if: failure()
      run: |
        echo "Deployment failed, would send email to: ${{ vars.ALERT_EMAIL }}"